// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(BUYER)
  avatar        String?
  phone         String?
  address       String?
  verified      Boolean   @default(false)
  balance       Float     @default(0)
  tokens        Int       @default(0) // Sistema de tokens virtuales
  totalBids     Int       @default(0)
  totalPurchases Int      @default(0)
  totalSpent    Float     @default(0)
  kycStatus     KYCStatus @default(PENDING)
  fraudScore    Int       @default(0)
  trustScore    Int       @default(100)
  lastLogin     DateTime?
  stripeCustomerId String? @unique
  stripeAccountId String? @unique
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bids          Bid[]
  favorites     Favorite[]
  notifications Notification[]
  messages      Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  transactions  Transaction[]
  tickets       Ticket[]  @relation("UserTickets")
  ticketReplies TicketReply[] @relation("UserTicketReplies")
  tokenPurchases TokenPurchase[]
  sellerRequests SellerRequest[] // Solicitudes para vender obras

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  image       String
  artworkCount Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  artworks    Artwork[]

  @@map("categories")
}

model Artwork {
  id             String        @id @default(cuid())
  title          String
  artist         String
  description    String
  categoryId     String
  year           Int
  medium         String
  dimensions     String
  image          String
  images         String[]      // Múltiples imágenes
  startingPrice  Float
  currentPrice   Float
  estimatedValue Float
  reservePrice   Float?        // Precio de reserva
  status         ArtworkStatus @default(ACTIVE)
  saleType       SaleType      @default(AUCTION) // AUCTION, DIRECT_SALE, BOTH
  endDate        DateTime
  totalBids      Int           @default(0)
  views          Int           @default(0)
  favorites      Int           @default(0)
  isArtBiddoOwned Boolean      @default(true) // Solo ArtBiddo puede vender
  commission     Float?        // Comisión si es obra de terceros
  originalSeller String?       // Vendedor original si es obra de terceros
  certificate    String?       // Certificado de autenticidad
  provenance     String?       // Procedencia de la obra
  condition      String?       // Estado de conservación
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  category       Category      @relation(fields: [categoryId], references: [id])
  bids           Bid[]
  artworkFavorites Favorite[]
  transactions   Transaction[]
  botActivity    BotActivity[]

  @@map("artworks")
}

model Bid {
  id        String   @id @default(cuid())
  amount    Int      // Cantidad en tokens (1 token = 1 puja)
  isBot     Boolean  @default(false) // Indica si es puja de bot
  botType   BotType? // Tipo de bot si aplica
  status    BidStatus @default(ACTIVE)
  createdAt DateTime @default(now())

  // Relations
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("bids")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([artworkId, userId])
  @@map("favorites")
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("notifications")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  sender    User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  receiver  User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@map("messages")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Float
  tokens      Int?              // Cantidad de tokens involucrados
  description String
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())

  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  artwork     Artwork?          @relation(fields: [artworkId], references: [id])
  artworkId   String?

  @@map("transactions")
}

// Sistema de Tokens
model TokenPurchase {
  id          String            @id @default(cuid())
  tokens      Int               // Cantidad de tokens comprados
  price       Float             // Precio total en euros
  pricePerToken Float           // Precio por token
  status      TransactionStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt   DateTime          @default(now())

  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("token_purchases")
}

// Sistema de Bots
model Bot {
  id          String    @id @default(cuid())
  name        String    @unique // Nombre del bot (ej: "Maria_Artista")
  type        BotType
  avatar      String?
  location    String?
  interests   String[]  // Categorías de interés
  isActive    Boolean   @default(true)
  maxBids     Int       @default(50) // Máximo de pujas por día
  bidAmount   Int       @default(1)  // Cantidad de tokens por puja
  frequency   Int       @default(300) // Frecuencia en segundos
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  activities  BotActivity[]

  @@map("bots")
}

model BotActivity {
  id          String   @id @default(cuid())
  action      BotAction
  tokens      Int
  artworkId   String
  createdAt   DateTime @default(now())

  // Relations
  bot         Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId       String
  artwork     Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("bot_activities")
}

model BotConfig {
  id                    String  @id @default(cuid())
  key                   String  @unique
  value                 String
  description           String?
  isActive              Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("bot_config")
}

// Solicitudes de Vendedores
model SellerRequest {
  id          String        @id @default(cuid())
  title       String
  artist      String
  description String
  images      String[]      // URLs de las imágenes
  suggestedPrice Float
  category    String
  medium      String
  dimensions  String?
  year        Int?
  provenance  String?
  certificate String?
  status      RequestStatus @default(PENDING)
  adminNotes  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("seller_requests")
}

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    TicketCategory
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  replies     TicketReply[]

  @@map("tickets")
}

model TicketReply {
  id        String   @id @default(cuid())
  content   String
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  user      User     @relation("UserTicketReplies", fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("ticket_replies")
}

// Enums
enum UserRole {
  BUYER
  SELLER_REQUEST // Usuario que quiere vender
  ADMIN
  MODERATOR
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ArtworkStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING
  RESERVED
}

enum SaleType {
  AUCTION
  DIRECT_SALE
  BOTH
}

enum BidStatus {
  ACTIVE
  OUTBID
  WON
  CANCELLED
}

enum BotType {
  ACTIVITY_BOT
  COMPETITIVE_BOT
  URGENCY_BOT
  SPECIALIZED_BOT
}

enum BotAction {
  BID
  VIEW
  FAVORITE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum NotificationType {
  BID_OUTBID
  AUCTION_ENDING
  NEW_ARTWORK
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  TOKEN_PURCHASE
  AUCTION_WON
  SYSTEM
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BID
  PURCHASE
  REFUND
  TOKEN_PURCHASE
  TOKEN_REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  PAYMENT
  ACCOUNT
  GENERAL
  BUG_REPORT
  FEATURE_REQUEST
  SELLER_REQUEST
}

// CMS Models
model PageContent {
  id          String   @id @default(cuid())
  page        String   // 'home', 'about', 'contact', etc.
  section     String   // 'hero', 'features', 'footer', etc.
  title       String?
  subtitle    String?
  description String?
  content     String?
  image       String?
  link        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([page, section])
  @@map("page_content")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique // 'site_name', 'contact_email', 'social_links', etc.
  value       String
  type        String   @default("text") // 'text', 'json', 'boolean', 'number'
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model ContentBlock {
  id          String   @id @default(cuid())
  name        String   @unique // 'hero_title', 'about_description', etc.
  title       String?
  content     String
  type        ContentType @default(TEXT)
  metadata    String? // JSON for additional data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("content_blocks")
}

enum ContentType {
  TEXT
  HTML
  IMAGE
  VIDEO
  JSON
}
